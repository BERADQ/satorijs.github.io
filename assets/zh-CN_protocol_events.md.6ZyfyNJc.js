import{_ as a,R as r,l as c,f as e,$ as t,m as h,w as s,a6 as d,a as l}from"./chunks/framework.DbNgHyU8.js";const D=JSON.parse('{"title":"事件","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/protocol/events.md","filePath":"zh-CN/protocol/events.md"}'),n={name:"zh-CN/protocol/events.md"},i=d('<h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><p>Satori 协议规定了两套事件服务，分别基于 WebSocket 和 WebHook。你可以根据自己的需要进行选择。</p><h2 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h2><h3 id="event" tabindex="-1">Event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;Event&quot;">​</a></h3><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>number</td><td>事件 ID</td></tr><tr><td><code>type</code></td><td>string</td><td>事件类型</td></tr><tr><td><code>platform</code></td><td>string</td><td>接收者的平台名称</td></tr><tr><td><code>self_id</code></td><td>string</td><td>接收者的平台账号</td></tr><tr><td><code>timestamp</code></td><td>number</td><td>事件的时间戳</td></tr><tr><td><code>argv</code></td><td><a href="./../resources/interaction.html#argv">Argv</a>?</td><td>交互指令</td></tr><tr><td><code>button</code></td><td><a href="./../resources/interaction.html#button">Button</a>?</td><td>交互按钮</td></tr><tr><td><code>channel</code></td><td><a href="./../resources/channel.html#channel">Channel</a>?</td><td>事件所属的频道</td></tr><tr><td><code>guild</code></td><td><a href="./../resources/guild.html#guild">Guild</a>?</td><td>事件所属的群组</td></tr><tr><td><code>login</code></td><td><a href="./../resources/login.html#login">Login</a>?</td><td>事件的登录信息</td></tr><tr><td><code>member</code></td><td><a href="./../resources/member.html#guildmember">GuildMember</a>?</td><td>事件的目标成员</td></tr><tr><td><code>message</code></td><td><a href="./../resources/message.html#message">Message</a>?</td><td>事件的消息</td></tr><tr><td><code>operator</code></td><td><a href="./../resources/user.html#user">User</a>?</td><td>事件的操作者</td></tr><tr><td><code>role</code></td><td><a href="./../resources/role.html#guildrole">GuildRole</a>?</td><td>事件的目标角色</td></tr><tr><td><code>user</code></td><td><a href="./../resources/user.html#user">User</a>?</td><td>事件的目标用户</td></tr></tbody></table><p>事件中的各属性遵循 <a href="./">资源提升</a> 规则。</p><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h2><p>WebSocket 服务用于在 Satori SDK 与应用之间维护一个持久的、有状态的链接。通过这个链接，Satori 应用可以实时接收 SDK 推送的事件。</p><p>WebSocket 服务的地址为 <code>/{path}/{version}/events</code>。其中，<code>path</code> 为部署路径 (可以为空)，<code>version</code> 为 API 的版本号。</p><p>目前 Satori 仅有 v1 一个版本。</p><h3 id="连接流程" tabindex="-1">连接流程 <a class="header-anchor" href="#连接流程" aria-label="Permalink to &quot;连接流程&quot;">​</a></h3><p>总的来说，Satori 应用需要在连接后遵循以下步骤：</p><ol><li>连接建立后，在 10s 内发送一个 <code>IDENTIFY</code> 信令，用于鉴权和恢复会话；<br>SDK 收到后会回复一个 <code>READY</code> 信令，并开启事件推送；</li><li>连接建立后，每隔 10s 向 SDK 发送一次 <code>PING</code> 信令；<br>SDK 收到后会回复一个 <code>PONG</code> 信令；</li><li>应用持续接收来自 SDK 的 <code>EVENT</code> 信令，用于接收事件。</li></ol><p>信令的数据结构如下：</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>op</code></td><td>number</td><td>信令类型</td></tr><tr><td><code>body</code></td><td>object?</td><td>信令数据</td></tr></tbody></table><p>信令类型如下：</p><table><thead><tr><th>名称</th><th>值</th><th>方向</th><th>描述</th></tr></thead><tbody><tr><td>EVENT</td><td>0</td><td>接收</td><td>事件</td></tr><tr><td>PING</td><td>1</td><td>发送</td><td>心跳</td></tr><tr><td>PONG</td><td>2</td><td>接收</td><td>心跳回复</td></tr><tr><td>IDENTIFY</td><td>3</td><td>发送</td><td>鉴权</td></tr><tr><td>READY</td><td>4</td><td>接收</td><td>鉴权回复</td></tr></tbody></table><p><code>IDENTIFY</code> 信令的 <code>body</code> 数据结构如下：</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>token</code></td><td>string?</td><td>鉴权令牌</td></tr><tr><td><code>sequence</code></td><td>number?</td><td>序列号</td></tr></tbody></table><p><code>READY</code> 信令的 <code>body</code> 数据结构如下：</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>logins</code></td><td><a href="./../resources/login.html"><code>Login[]</code></a></td><td>登录信息</td></tr></tbody></table><p><code>EVENT</code> 信令的 <code>body</code> 数据结构参见 <a href="#event">Event</a>。</p><h3 id="鉴权" tabindex="-1">鉴权 <a class="header-anchor" href="#鉴权" aria-label="Permalink to &quot;鉴权&quot;">​</a></h3><p>WebSocket 鉴权通过 IDENTIFY 信令的 <code>token</code> 字段来实现。其中涉及的鉴权令牌由 SDK 分发，本协议不做任何限制。</p><p>如果 SDK 没有配置鉴权，则应用无需提供上述字段。</p><h3 id="会话恢复" tabindex="-1">会话恢复 <a class="header-anchor" href="#会话恢复" aria-label="Permalink to &quot;会话恢复&quot;">​</a></h3><p>当连接短暂中断时，Satori 应用可以通过 <code>IDENTIFY</code> 信令的 <code>sequence</code> 字段来恢复会话。<code>sequence</code> 字段的值为上一次连接中最后一个接收到的 <code>EVENT</code> 信令的 <code>id</code> 字段。会话恢复后，SDK 会向应用推送所有在断开连接期间发生的事件。</p>',27),b={id:"webhook",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#webhook","aria-label":'Permalink to "WebHook <badge>可选</badge>"'},"​",-1),u=d('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这是一个可选功能。</p></div><p>WebHook 服务是指，Satori SDK 在接收到平台事件时，向应用提供的 HTTP 地址推送事件。一个 SDK 应当可以配置多个 WebHook，并允许应用对发送者进行鉴权。这些 WebHook 的配置方式由 SDK 自身决定，本协议规范化了一组 <a href="./../advanced/admin.html">管理接口</a>，但不做强制要求。</p><p>事件推送以 POST 的形式进行，参数以 <code>application/json</code> 的形式编码在请求体中。数据结构参见 <a href="#event">Event</a>。</p><p>应用收到 WebHook 请求时，如果能够顺利鉴权并处理请求，应当返回 2XX 的状态码。如果鉴权失败，应当返回 4XX 的状态码。如果处理失败，应当返回 5XX 的状态码。</p><h3 id="反向鉴权" tabindex="-1">反向鉴权 <a class="header-anchor" href="#反向鉴权" aria-label="Permalink to &quot;反向鉴权&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里的鉴权与 API 与 WebSocket 中的鉴权逻辑类似，但方向相反。</p></div><p>Satori 应用可以要求 SDK 在发送 WebHook 请求时附带一个 <code>Authorization</code> 请求头，格式为 <code>Bearer {token}</code>。其中，<code>token</code> 由应用进行分发。</p>',7);function m(_,k,S,f,g,v){const o=r("badge");return l(),c("div",null,[i,e("h2",b,[t("WebHook "),h(o,null,{default:s(()=>[t("可选")]),_:1}),t(),p]),u])}const P=a(n,[["render",m]]);export{D as __pageData,P as default};
